{"version":3,"file":"pixi-tilemap.js","sources":["../src/CanvasTileRenderer.ts","../src/Constant.ts","../src/RectTileLayer.ts","../src/CompositeRectTileLayer.ts","../src/GraphicsLayer.ts","../src/MultiTextureResource.ts","../src/shaderGenerator.ts","../src/RectTileShader.ts","../src/TileRenderer.ts","../src/ZLayer.ts","../src/index.ts"],"sourcesContent":["/// <reference path=\"types.d.ts\" />\n\nimport { Renderer } from '@pixi/core';\n\nexport class CanvasTileRenderer {\n    renderer: Renderer;\n    tileAnim = [0, 0];\n    dontUseTransform = false;\n\n    constructor(renderer: Renderer) {\n        this.renderer = renderer;\n        this.tileAnim = [0, 0];\n    }\n}\n\nconst cr = (PIXI as any).CanvasRenderer;\n\nif (cr) {\n    cr.registerPlugin('tilemap', CanvasTileRenderer);\n}\n","/// <reference path=\"types.d.ts\" />\n\nimport { SCALE_MODES } from '@pixi/constants';\n\nexport const Constant = {\n    maxTextures: 16,\n    bufferSize: 2048,\n    boundSize: 1024,\n    boundCountPerBuffer: 1,\n    use32bitIndex: false,\n    SCALE_MODE: SCALE_MODES.LINEAR,\n    DO_CLEAR: true\n};","/// <reference path=\"types.d.ts\" />\n\nimport { Container, Bounds } from '@pixi/display';\nimport { Constant } from './Constant';\nimport { DRAW_MODES } from '@pixi/constants';\nimport { Texture, Renderer } from '@pixi/core';\nimport { TileRenderer } from './TileRenderer';\nimport { Matrix, Rectangle, groupD8 } from '@pixi/math';\n\nimport type { RectTileGeom } from './RectTileShader';\n\nexport const POINT_STRUCT_SIZE = 12;\n\nexport class RectTileLayer extends Container {\n    constructor(zIndex: number, texture: Texture | Array<Texture>) {\n        super();\n        this.initialize(zIndex, texture);\n    }\n\n    zIndex = 0;\n    modificationMarker = 0;\n    _$_localBounds = new Bounds();\n    shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n    _globalMat: Matrix = null;\n\n    pointsBuf: Array<number> = [];\n    hasAnim = false;\n    textures: Array<Texture>;\n\n    offsetX = 0;\n    offsetY = 0;\n    compositeParent = false;\n\n    initialize(zIndex: number, textures: Texture | Array<Texture>) {\n        if (!textures) {\n            textures = [];\n        } else if (!(textures instanceof Array) && (textures as Texture).baseTexture) {\n            textures = [textures as Texture];\n        }\n        this.textures = textures as Array<Texture>;\n        this.zIndex = zIndex;\n        // this.visible = false;\n    }\n\n    clear() {\n        this.pointsBuf.length = 0;\n        this.modificationMarker = 0;\n        this._$_localBounds.clear();\n        this.hasAnim = false;\n    }\n\n    addFrame(texture_: Texture | String | number, x: number, y: number, animX: number, animY: number) {\n        let texture: Texture;\n        let textureIndex = 0;\n\n        if (typeof texture_ === \"number\") {\n            textureIndex = texture_;\n            texture = this.textures[textureIndex];\n        } else {\n            if (typeof texture_ === \"string\") {\n                texture = Texture.from(texture_);\n            } else {\n                texture = texture_ as Texture;\n            }\n\n            let found = false;\n            let textureList = this.textures;\n            for (let i = 0; i < textureList.length; i++) {\n                if (textureList[i].baseTexture === texture.baseTexture) {\n                    textureIndex = i;\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found) {\n                // textureIndex = this.textures.length;\n                // this.textures.push(texture);\n                return false;\n            }\n        }\n\n        this.addRect(textureIndex, texture.frame.x, texture.frame.y, x, y, texture.orig.width, texture.orig.height, animX, animY, texture.rotate);\n        return true;\n    }\n\n    addRect(textureIndex: number, u: number, v: number, x: number, y: number, tileWidth: number, tileHeight: number,\n            animX: number = 0, animY: number = 0, rotate: number = 0, animCountX: number = 1024, animCountY: number = 1024): this {\n        let pb = this.pointsBuf;\n        this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\n        pb.push(u);\n        pb.push(v);\n        pb.push(x);\n        pb.push(y);\n        pb.push(tileWidth);\n        pb.push(tileHeight);\n        pb.push(rotate);\n        pb.push(animX | 0);\n        pb.push(animY | 0);\n        pb.push(textureIndex);\n        pb.push(animCountX);\n        pb.push(animCountY);\n\n        this._$_localBounds.addFramePad(x, y, x+tileWidth, y+tileHeight, 0, 0);\n\n        return this;\n    }\n\n    tileRotate(rotate: number) {\n        const pb = this.pointsBuf;\n        pb[pb.length - 3] = rotate;\n    }\n\n    tileAnimX(offset: number, count: number) {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - 5] = offset;\n        pb[pb.length - 2] = count;\n    }\n\n    tileAnimY(offset: number, count: number) {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - 4] = offset;\n        pb[pb.length - 1] = count;\n    }\n\n    renderCanvas(renderer: any) {\n        let plugin = renderer.plugins.tilemap;\n        if (!plugin.dontUseTransform) {\n            let wt = this.worldTransform;\n            renderer.context.setTransform(\n                wt.a,\n                wt.b,\n                wt.c,\n                wt.d,\n                wt.tx * renderer.resolution,\n                wt.ty * renderer.resolution\n            );\n        }\n        this.renderCanvasCore(renderer);\n    }\n\n    renderCanvasCore(renderer: any) {\n        if (this.textures.length === 0) return;\n        let points = this.pointsBuf;\n        renderer.context.fillStyle = '#000000';\n        for (let i = 0, n = points.length; i < n; i += POINT_STRUCT_SIZE) {\n            let x1 = points[i], y1 = points[i + 1];\n            let x2 = points[i + 2], y2 = points[i + 3];\n            let w = points[i + 4];\n            let h = points[i + 5];\n            var rotate = points[i + 6];\n            x1 += points[i + 7] * renderer.plugins.tilemap.tileAnim[0];\n            y1 += points[i + 8] * renderer.plugins.tilemap.tileAnim[1];\n            let textureIndex = points[i + 9];\n            // canvas does not work with rotate yet\n            if (textureIndex >= 0) {\n                renderer.context.drawImage((this.textures[textureIndex].baseTexture as any).getDrawableSource(), x1, y1, w, h, x2, y2, w, h);\n            } else {\n                renderer.context.globalAlpha = 0.5;\n                renderer.context.fillRect(x2, y2, w, h);\n                renderer.context.globalAlpha = 1;\n            }\n        }\n    }\n\n    vbId = 0;\n    vb: RectTileGeom = null;\n    vbBuffer: ArrayBuffer = null;\n    vbArray: Float32Array = null;\n    vbInts: Uint32Array = null;\n\n    destroyVb() {\n        if (this.vb) {\n            this.vb.destroy();\n            this.vb = null;\n        }\n    }\n\n    render(renderer: Renderer) {\n        let plugin = (renderer.plugins as any)['tilemap'];\n        let shader = plugin.getShader();\n        renderer.batch.setObjectRenderer(plugin);\n        this._globalMat = shader.uniforms.projTransMatrix;\n        renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\n        shader.uniforms.shadowColor = this.shadowColor;\n        shader.uniforms.animationFrame = plugin.tileAnim;\n        this.renderWebGLCore(renderer, plugin);\n    }\n\n    renderWebGLCore(renderer: Renderer, plugin: TileRenderer) {\n        let points = this.pointsBuf;\n        if (points.length === 0) return;\n        let rectsCount = points.length / POINT_STRUCT_SIZE;\n\n        let shader = plugin.getShader();\n        let textures = this.textures;\n        if (textures.length === 0) return;\n\n        plugin.bindTextures(renderer, shader, textures);\n        renderer.shader.bind(shader, false);\n\n        //lost context! recover!\n        let vb = this.vb;\n        if (!vb) {\n            vb = plugin.createVb();\n            this.vb = vb;\n            this.vbId = (vb as any).id;\n            this.vbBuffer = null;\n            this.modificationMarker = 0;\n        }\n\n        plugin.checkIndexBuffer(rectsCount, vb);\n        const boundCountPerBuffer = Constant.boundCountPerBuffer;\n\n        let vertexBuf = vb.getBuffer('aVertexPosition');\n        //if layer was changed, re-upload vertices\n        let vertices = rectsCount * vb.vertPerQuad;\n        if (vertices === 0) return;\n        if (this.modificationMarker !== vertices) {\n            this.modificationMarker = vertices;\n            let vs = vb.stride * vertices;\n            if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\n                //!@#$ happens, need resize\n                let bk = vb.stride;\n                while (bk < vs) {\n                    bk *= 2;\n                }\n                this.vbBuffer = new ArrayBuffer(bk);\n                this.vbArray = new Float32Array(this.vbBuffer);\n                this.vbInts = new Uint32Array(this.vbBuffer);\n                vertexBuf.update(this.vbBuffer);\n            }\n\n            let arr = this.vbArray, ints = this.vbInts;\n            //upload vertices!\n            let sz = 0;\n            //let tint = 0xffffffff;\n            let textureId: number = 0;\n            let shiftU: number = this.offsetX;\n            let shiftV: number = this.offsetY;\n\n            //let tint = 0xffffffff;\n            let tint = -1;\n            for (let i = 0; i < points.length; i += POINT_STRUCT_SIZE) {\n                let eps = 0.5;\n                if (this.compositeParent) {\n                    if (boundCountPerBuffer > 1) {\n                        //TODO: what if its more than 4?\n                        textureId = (points[i + 9] >> 2);\n                        shiftU = this.offsetX * (points[i + 9] & 1);\n                        shiftV = this.offsetY * ((points[i + 9] >> 1) & 1);\n                    } else {\n                        textureId = points[i + 9];\n                        shiftU = 0;\n                        shiftV = 0;\n                    }\n                }\n                let x = points[i + 2], y = points[i + 3];\n                let w = points[i + 4], h = points[i + 5];\n                let u = points[i] + shiftU, v = points[i + 1] + shiftV;\n                let rotate = points[i + 6];\n\n                const animX = points[i + 7], animY = points[i + 8];\n                const animWidth = points[i + 10] || 1024, animHeight = points[i + 11] || 1024;\n                const animXEncoded = animX + (animWidth * 2048);\n                const animYEncoded = animY + (animHeight * 2048);\n\n                let u0: number, v0: number, u1: number, v1: number, u2: number, v2: number, u3: number, v3: number;\n                if (rotate === 0) {\n                    u0 = u;\n                    v0 = v;\n                    u1 = u + w;\n                    v1 = v;\n                    u2 = u + w;\n                    v2 = v + h;\n                    u3 = u;\n                    v3 = v + h;\n                } else {\n                    let w2 = w / 2;\n                    let h2 = h / 2;\n                    if (rotate % 4 !== 0) {\n                        w2 = h / 2;\n                        h2 = w / 2;\n                    }\n                    const cX = u + w2;\n                    const cY = v + h2;\n\n                    rotate = groupD8.add(rotate, groupD8.NW);\n                    u0 = cX + (w2 * groupD8.uX(rotate));\n                    v0 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n                    u1 = cX + (w2 * groupD8.uX(rotate));\n                    v1 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2);\n                    u2 = cX + (w2 * groupD8.uX(rotate));\n                    v2 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2);\n                    u3 = cX + (w2 * groupD8.uX(rotate));\n                    v3 = cY + (h2 * groupD8.uY(rotate));\n                }\n\n                arr[sz++] = x;\n                arr[sz++] = y;\n                arr[sz++] = u0;\n                arr[sz++] = v0;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = x + w;\n                arr[sz++] = y;\n                arr[sz++] = u1;\n                arr[sz++] = v1;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = x + w;\n                arr[sz++] = y + h;\n                arr[sz++] = u2;\n                arr[sz++] = v2;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = x;\n                arr[sz++] = y + h;\n                arr[sz++] = u3;\n                arr[sz++] = v3;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n            }\n\n            vertexBuf.update(arr);\n        }\n\n        (renderer.geometry as any).bind(vb, shader);\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, rectsCount * 6, 0);\n    }\n\n    isModified(anim: boolean) {\n        if (this.modificationMarker !== this.pointsBuf.length ||\n            anim && this.hasAnim) {\n            return true;\n        }\n        return false;\n    }\n\n    clearModify() {\n        this.modificationMarker = this.pointsBuf.length;\n    }\n\n    protected _calculateBounds(): void\n    {\n        const { minX, minY, maxX, maxY } = this._$_localBounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            return this._$_localBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    destroy(options?: any) {\n        super.destroy(options);\n        this.destroyVb();\n    }\n}\n","/// <reference path=\"types.d.ts\" />\n\nimport { Container } from '@pixi/display';\nimport { Texture, Renderer } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { Constant } from './Constant';\nimport { RectTileLayer } from './RectTileLayer';\n\nexport class CompositeRectTileLayer extends Container {\n    constructor(zIndex?: number, bitmaps?: Array<Texture>, texPerChild?: number) {\n        super();\n        this.initialize.apply(this, arguments);\n    }\n\n    z: number;\n    zIndex: number;\n    modificationMarker = 0;\n    shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n    _globalMat: Matrix = null;\n    _lastLayer: RectTileLayer = null;\n\n    texPerChild: number;\n\n    initialize(zIndex?: number, bitmaps?: Array<Texture>, texPerChild?: number) {\n        if (texPerChild as any === true) {\n            //old format, ignore it!\n            texPerChild = 0;\n        }\n        this.z = this.zIndex = zIndex;\n        this.texPerChild = texPerChild || Constant.boundCountPerBuffer * Constant.maxTextures;\n        if (bitmaps) {\n            this.setBitmaps(bitmaps);\n        }\n    }\n\n    setBitmaps(bitmaps: Array<Texture>) {\n        for (let i=0;i<bitmaps.length;i++) {\n            if (bitmaps[i] && !bitmaps[i].baseTexture) {\n                throw new Error(`pixi-tilemap cannot use destroyed textures. `+\n                    `Probably, you passed resources['myAtlas'].texture in pixi > 5.2.1, it does not exist there.`);\n            }\n        }\n        let texPerChild = this.texPerChild;\n        let len1 = this.children.length;\n        let len2 = Math.ceil(bitmaps.length / texPerChild);\n        let i: number;\n        for (i = 0; i < len1; i++) {\n            (this.children[i] as RectTileLayer).textures = bitmaps.slice(i * texPerChild, (i + 1) * texPerChild);\n        }\n        for (i = len1; i < len2; i++) {\n            let layer = new RectTileLayer(this.zIndex, bitmaps.slice(i * texPerChild, (i + 1) * texPerChild));\n            layer.compositeParent = true;\n            layer.offsetX = Constant.boundSize;\n            layer.offsetY = Constant.boundSize;\n            this.addChild(layer);\n        }\n    }\n\n    clear() {\n        for (let i = 0; i < this.children.length; i++) {\n            (this.children[i] as RectTileLayer).clear();\n        }\n        this.modificationMarker = 0;\n    }\n\n    addRect(textureIndex: number, u: number, v: number, x: number, y: number, tileWidth: number, tileHeight: number, animX?: number, animY?: number, rotate?: number, animWidth?: number, animHeight?: number): this {\n        const childIndex: number = textureIndex / this.texPerChild >> 0;\n        const textureId: number = textureIndex % this.texPerChild;\n\n        if (this.children[childIndex] && (this.children[childIndex] as RectTileLayer).textures) {\n            this._lastLayer = (this.children[childIndex] as RectTileLayer);\n            this._lastLayer.addRect(textureId, u, v, x, y, tileWidth, tileHeight, animX, animY, rotate, animWidth, animHeight);\n        } else {\n            this._lastLayer = null;\n        }\n\n        return this;\n    }\n\n    tileRotate(rotate: number): this {\n        if (this._lastLayer)\n        {\n            this._lastLayer.tileRotate(rotate);\n        }\n        return this;\n    }\n\n    tileAnimX(offset: number, count: number): this {\n        if (this._lastLayer)\n        {\n            this._lastLayer.tileAnimX(offset, count);\n        }\n        return this;\n    }\n\n    tileAnimY(offset: number, count: number): this {\n        if (this._lastLayer)\n        {\n            this._lastLayer.tileAnimY(offset, count);\n        }\n        return this;\n    }\n\n    addFrame(texture_: Texture | String | number, x: number, y: number, animX?: number, animY?: number, animWidth?: number, animHeight?: number): this {\n        let texture: Texture;\n        let layer: RectTileLayer = null;\n        let ind: number = 0;\n        let children = this.children;\n\n        this._lastLayer = null;\n        if (typeof texture_ === \"number\") {\n            let childIndex = texture_ / this.texPerChild >> 0;\n            layer = children[childIndex] as RectTileLayer;\n\n            if (!layer) {\n                layer = children[0] as RectTileLayer;\n                if (!layer) {\n                    return this;\n                }\n                ind = 0;\n            } else {\n                ind = texture_ % this.texPerChild;\n            }\n\n            texture = layer.textures[ind];\n        } else {\n            if (typeof texture_ === \"string\") {\n                texture = Texture.from(texture_);\n            } else {\n                texture = texture_ as Texture;\n            }\n\n            for (let i = 0; i < children.length; i++) {\n                let child = children[i] as RectTileLayer;\n                let tex = child.textures;\n                for (let j = 0; j < tex.length; j++) {\n                    if (tex[j].baseTexture === texture.baseTexture) {\n                        layer = child;\n                        ind = j;\n                        break;\n                    }\n                }\n                if (layer) {\n                    break;\n                }\n            }\n\n            if (!layer) {\n                for (let i = 0; i < children.length; i++) {\n                    let child = children[i] as RectTileLayer;\n                    if (child.textures.length < this.texPerChild) {\n                        layer = child;\n                        ind = child.textures.length;\n                        child.textures.push(texture);\n                        break;\n                    }\n                }\n                if (!layer) {\n                    layer = new RectTileLayer(this.zIndex, texture);\n                    layer.compositeParent = true;\n                    layer.offsetX = Constant.boundSize;\n                    layer.offsetY = Constant.boundSize;\n                    this.addChild(layer);\n                    ind = 0;\n                }\n            }\n        }\n\n        this._lastLayer = layer;\n        layer.addRect(ind, texture.frame.x, texture.frame.y, x, y, texture.orig.width, texture.orig.height, animX, animY, texture.rotate, animWidth, animHeight);\n        return this;\n    }\n\n    renderCanvas(renderer: any) {\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n            return;\n        }\n        let plugin = renderer.plugins.tilemap;\n        if (!plugin.dontUseTransform) {\n            let wt = this.worldTransform;\n            renderer.context.setTransform(\n                wt.a,\n                wt.b,\n                wt.c,\n                wt.d,\n                wt.tx * renderer.resolution,\n                wt.ty * renderer.resolution\n            );\n        }\n        let layers = this.children;\n        for (let i = 0; i < layers.length; i++) {\n            (layers[i] as RectTileLayer).renderCanvasCore(renderer);\n        }\n    }\n\n    render(renderer: Renderer) {\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n            return;\n        }\n        let plugin = (renderer.plugins as any)['tilemap'];\n        let shader = plugin.getShader();\n        renderer.batch.setObjectRenderer(plugin);\n        //TODO: dont create new array, please\n        this._globalMat = shader.uniforms.projTransMatrix;\n        renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\n        shader.uniforms.shadowColor = this.shadowColor;\n        shader.uniforms.animationFrame = plugin.tileAnim;\n        renderer.shader.bind(shader, false);\n        let layers = this.children;\n        for (let i = 0; i < layers.length; i++) {\n            (layers[i] as RectTileLayer).renderWebGLCore(renderer, plugin);\n        }\n    }\n\n    isModified(anim: boolean) {\n        let layers = this.children;\n        if (this.modificationMarker !== layers.length) {\n            return true;\n        }\n        for (let i = 0; i < layers.length; i++) {\n            if ((layers[i] as RectTileLayer).isModified(anim)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    clearModify() {\n        let layers = this.children;\n        this.modificationMarker = layers.length;\n        for (let i = 0; i < layers.length; i++) {\n            (layers[i] as RectTileLayer).clearModify();\n        }\n    }\n}\n","/// <reference path=\"types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\nimport { Graphics } from '@pixi/graphics';\n\nexport class GraphicsLayer extends Graphics {\n    constructor(zIndex: number) {\n        super();\n        this.zIndex = zIndex;\n    }\n\n    renderCanvas(renderer: any) {\n        let wt: Matrix = null;\n        if (renderer.plugins.tilemap.dontUseTransform) {\n            wt = this.transform.worldTransform;\n            this.transform.worldTransform = Matrix.IDENTITY;\n        }\n        renderer.plugins.graphics.render(this);\n        if (renderer.plugins.tilemap.dontUseTransform) {\n            this.transform.worldTransform = wt;\n        }\n        renderer.context.globalAlpha = 1.0;\n    }\n\n    // renderWebGL(renderer: PIXI.Renderer) {\n    //     if (!this._webGL[renderer.CONTEXT_UID])\n    //         this.dirty++;\n    //     super.renderWebGL(renderer)\n    // }\n\n    isModified(anim: boolean): boolean {\n        return false;\n    }\n\n    clearModify() {\n    }\n}\n","/// <reference path=\"types.d.ts\" />\n\nimport { ALPHA_MODES } from '@pixi/constants';\nimport { BaseTexture, Renderer, Texture, GLTexture, resources } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Constant } from './Constant';\n\nexport interface IMultiTextureOptions {\n\tboundCountPerBuffer: number;\n\tboundSize: number;\n\tbufferSize: number;\n\tDO_CLEAR?: boolean;\n}\n\nexport class MultiTextureResource extends resources.Resource {\n\tconstructor(options: IMultiTextureOptions) {\n\t\tsuper(options.bufferSize, options.bufferSize);\n\n\t\tconst bounds = this.boundSprites;\n\t\tconst dirties = this.dirties;\n\t\tthis.boundSize = options.boundSize;\n\t\tfor (let j = 0; j < options.boundCountPerBuffer; j++) {\n\t\t\tconst spr = new Sprite();\n\t\t\tspr.position.x = options.boundSize * (j & 1);\n\t\t\tspr.position.y = options.boundSize * (j >> 1);\n\t\t\tbounds.push(spr);\n\t\t\tdirties.push(0);\n\t\t}\n\t\tthis.DO_CLEAR = !!options.DO_CLEAR;\n\t}\n\n\tDO_CLEAR = false;\n\tboundSize: number = 0;\n\t_clearBuffer: Uint8Array = null;\n\n\tbind(baseTexture: BaseTexture) {\n\t\tif (this.baseTex) {\n\t\t\tthrow new Error('Only one baseTexture is allowed for this resource!')\n\t\t}\n\t\tthis.baseTex = baseTexture;\n\t\tsuper.bind(baseTexture);\n\t}\n\n\tbaseTex: BaseTexture = null;\n\tboundSprites: Array<Sprite> = [];\n\tdirties: Array<number> = [];\n\n\tsetTexture(ind: number, texture: Texture) {\n\t\tconst spr = this.boundSprites[ind];\n\t\tif (spr.texture.baseTexture === texture.baseTexture) {\n\t\t\treturn;\n\t\t}\n\t\tspr.texture = texture;\n\t\tthis.baseTex.update();\n\t\tthis.dirties[ind] = (this.baseTex as any).dirtyId;\n\t}\n\n\tupload(renderer: Renderer, texture: BaseTexture, glTexture: GLTexture) {\n\t\tconst { gl } = renderer as any;\n\n\t\tconst {width, height} = this;\n\t\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.alphaMode === undefined ||\n\t\t\ttexture.alphaMode === ALPHA_MODES.UNPACK);\n\n\t\tif (glTexture.dirtyId < 0) {\n\t\t\t(glTexture as any).width = width;\n\t\t\t(glTexture as any).height = height;\n\n\t\t\tgl.texImage2D(texture.target, 0,\n\t\t\t\ttexture.format,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\t0,\n\t\t\t\ttexture.format,\n\t\t\t\ttexture.type,\n\t\t\t\tnull);\n\t\t}\n\n\t\tconst doClear = this.DO_CLEAR;\n\t\tif (doClear && !this._clearBuffer) {\n\t\t\tthis._clearBuffer = new Uint8Array(Constant.boundSize * Constant.boundSize * 4);\n\t\t}\n\n\t\tconst bounds = this.boundSprites;\n\t\tfor (let i = 0; i < bounds.length; i++) {\n\t\t\tconst spr = bounds[i];\n\t\t\tconst tex = spr.texture.baseTexture;\n\t\t\tif (glTexture.dirtyId >= this.dirties[i]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst res = tex.resource as any;\n\t\t\tif (!tex.valid || !res || !res.source) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (doClear && (tex.width < this.boundSize || tex.height < this.boundSize))\n\t\t\t{\n\t\t\t\tgl.texSubImage2D(texture.target, 0,\n\t\t\t\t\tspr.position.x,\n\t\t\t\t\tspr.position.y,\n\t\t\t\t\tthis.boundSize,\n\t\t\t\t\tthis.boundSize,\n\t\t\t\t\ttexture.format,\n\t\t\t\t\ttexture.type,\n\t\t\t\t\tthis._clearBuffer);\n\t\t\t}\n\t\t\tgl.texSubImage2D(texture.target, 0,\n\t\t\t\tspr.position.x,\n\t\t\t\tspr.position.y,\n\t\t\t\ttexture.format,\n\t\t\t\ttexture.type,\n\t\t\t\tres.source);\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","import { Constant } from './Constant';\n\nimport type { TilemapShader } from './RectTileShader';\n\n\nexport function fillSamplers(shader: TilemapShader, maxTextures: number) {\n    let sampleValues: Array<number> = [];\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n    shader.uniforms.uSamplers = sampleValues;\n\n    let samplerSize: Array<number> = [];\n    for (let i = 0; i < maxTextures; i++) {\n        samplerSize.push(1.0 / Constant.bufferSize);\n        samplerSize.push(1.0 / Constant.bufferSize);\n    }\n    shader.uniforms.uSamplerSize = samplerSize;\n}\n\nexport function generateFragmentSrc(maxTextures: number, fragmentSrc: string) {\n    return fragmentSrc.replace(/%count%/gi, maxTextures + \"\")\n        .replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n}\n\nexport function generateSampleSrc(maxTextures: number) {\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    src += 'if(vTextureId <= -1.0) {';\n    src += '\\n\\tcolor = shadowColor;';\n    src += '\\n}';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        src += '\\nelse ';\n\n        if(i < maxTextures-1)\n        {\n            src += 'if(textureId == ' + i + '.0)';\n        }\n\n        src += '\\n{';\n        src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n","/// <reference path=\"types.d.ts\" />\n\nimport * as shaderGenerator from './shaderGenerator';\n\nimport { Buffer, Geometry, Shader, Program } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\n\nlet rectShaderFrag = `\nvarying vec2 vTextureCoord;\nvarying vec4 vFrame;\nvarying float vTextureId;\nuniform vec4 shadowColor;\nuniform sampler2D uSamplers[%count%];\nuniform vec2 uSamplerSize[%count%];\n\nvoid main(void){\n   vec2 textureCoord = clamp(vTextureCoord, vFrame.xy, vFrame.zw);\n   float textureId = floor(vTextureId + 0.5);\n\n   vec4 color;\n   %forloop%\n   gl_FragColor = color;\n}\n`;\nlet rectShaderVert = `\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aFrame;\nattribute vec2 aAnim;\nattribute float aTextureId;\n\nuniform mat3 projTransMatrix;\nuniform vec2 animationFrame;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vFrame;\n\nvoid main(void){\n   gl_Position = vec4((projTransMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vec2 animCount = floor((aAnim + 0.5) / 2048.0);\n   vec2 animFrameOffset = aAnim - animCount * 2048.0;\n   vec2 animOffset = animFrameOffset * floor(mod(animationFrame + 0.5, animCount));\n\n   vTextureCoord = aTextureCoord + animOffset;\n   vFrame = aFrame + vec4(animOffset, animOffset);\n   vTextureId = aTextureId;\n}\n`;\n\nexport abstract class TilemapShader extends Shader {\n\tmaxTextures = 0;\n\n\tconstructor(maxTextures: number, shaderVert: string, shaderFrag: string) {\n\t\tsuper(\n\t\t\tnew Program(\n\t\t\t\tshaderVert,\n\t\t\t\tshaderFrag),\n\t\t\t{\n\t\t\t\tanimationFrame: new Float32Array(2),\n\t\t\t\tuSamplers: [],\n\t\t\t\tuSamplerSize: [],\n\t\t\t\tprojTransMatrix: new Matrix()\n\t\t\t}\n\t\t);\n\t\tthis.maxTextures = maxTextures;\n\t\tshaderGenerator.fillSamplers(this, this.maxTextures);\n\t}\n}\n\nexport class RectTileShader extends TilemapShader {\n\tconstructor(maxTextures: number) {\n\t\tsuper(\n\t\t\tmaxTextures,\n\t\t\trectShaderVert,\n\t\t\tshaderGenerator.generateFragmentSrc(maxTextures, rectShaderFrag)\n\t\t);\n\t\tshaderGenerator.fillSamplers(this, this.maxTextures);\n\t}\n}\n\nexport class RectTileGeom extends Geometry {\n\tvertSize = 11;\n\tvertPerQuad = 4;\n\tstride = this.vertSize * 4;\n\tlastTimeAccess = 0;\n\n\tconstructor() {\n\t\tsuper();\n\t\tconst buf = this.buf = new Buffer(new Float32Array(2), true, false);\n\t\tthis.addAttribute('aVertexPosition', buf, 0, false, 0, this.stride, 0)\n\t\t\t.addAttribute('aTextureCoord', buf, 0, false, 0, this.stride, 2 * 4)\n\t\t\t.addAttribute('aFrame', buf, 0, false, 0, this.stride, 4 * 4)\n\t\t\t.addAttribute('aAnim', buf, 0, false, 0, this.stride, 8 * 4)\n\t\t\t.addAttribute('aTextureId', buf, 0, false, 0, this.stride, 10 * 4);\n\t}\n\n\tbuf: Buffer;\n}\n","import { WRAP_MODES } from '@pixi/constants';\nimport { BaseTexture, Buffer, resources, ObjectRenderer, Texture, Renderer } from '@pixi/core';\nimport { Constant } from './Constant';\nimport { RectTileGeom, RectTileShader } from './RectTileShader';\nimport { MultiTextureResource } from './MultiTextureResource';\n\nimport type { TilemapShader } from './RectTileShader';\n\n/**\n * Renderer for rectangle tiles.\n */\nexport class TileRenderer extends ObjectRenderer {\n\trenderer: Renderer;\n\tgl: WebGLRenderingContext;\n\tsn: number = -1;\n\tindexBuffer: Buffer = null;\n\tibLen: number = 0;\n\ttileAnim = [0, 0];\n\ttexLoc: Array<number> = [];\n\n\trectShader: RectTileShader;\n\ttexResources: Array<MultiTextureResource> = [];\n\n\tconstructor(renderer: Renderer) {\n\t\tsuper(renderer);\n\t\tthis.rectShader = new RectTileShader(Constant.maxTextures);\n\t\tthis.indexBuffer = new Buffer(undefined, true, true);\n\t\tthis.checkIndexBuffer(2000);\n\t\tthis.initBounds();\n\t}\n\n\tinitBounds() {\n\t\tif (Constant.boundCountPerBuffer <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst maxTextures = Constant.maxTextures;\n\t\tfor (let i = 0; i < maxTextures; i++) {\n\t\t\tconst resource = new MultiTextureResource(Constant);\n\t\t\tconst baseTex = new BaseTexture(resource);\n\t\t\tbaseTex.scaleMode = Constant.SCALE_MODE;\n\t\t\tbaseTex.wrapMode = WRAP_MODES.CLAMP;\n\t\t\tthis.texResources.push(resource);\n\t\t}\n\t}\n\n\tbindTexturesWithoutRT(renderer: Renderer, shader: TilemapShader, textures: Array<Texture>) {\n\t\tlet samplerSize: Array<number> = (shader as any).uniforms.uSamplerSize;\n\t\tthis.texLoc.length = 0;\n\t\tfor (let i = 0; i < textures.length; i++) {\n\t\t\tconst texture = textures[i];\n\t\t\tif (!texture || !texture.valid) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trenderer.texture.bind(textures[i], i);\n\t\t\t//TODO: add resolution here\n\t\t\tsamplerSize[i * 2] = 1.0 / textures[i].baseTexture.width;\n\t\t\tsamplerSize[i * 2 + 1] = 1.0 / textures[i].baseTexture.height;\n\t\t}\n\t\t(shader as any).uniforms.uSamplerSize = samplerSize;\n\t}\n\n\tbindTextures(renderer: Renderer, shader: TilemapShader, textures: Array<Texture>) {\n\t\tconst len = textures.length;\n\t\tconst maxTextures = Constant.maxTextures;\n\t\tif (len > Constant.boundCountPerBuffer * maxTextures) {\n\t\t\treturn;\n\t\t}\n\t\tif (Constant.boundCountPerBuffer <= 1) {\n\t\t\tthis.bindTexturesWithoutRT(renderer, shader, textures);\n\t\t\treturn;\n\t\t}\n\n\t\tlet i = 0;\n\t\tfor (; i < len; i++) {\n\t\t\tconst texture = textures[i];\n\t\t\tif (!texture || !texture.valid) continue;\n\t\t\tconst multi = this.texResources[i >> 2];\n\t\t\tmulti.setTexture(i & 3, texture);\n\t\t}\n\n\t\tlet gltsUsed = (i + 3) >> 2;\n\t\tfor (i = 0; i < gltsUsed; i++) {\n\t\t\t//remove \"i, true\" after resolving a bug\n\t\t\trenderer.texture.bind(this.texResources[i].baseTex, i);\n\t\t}\n\t}\n\n\tstart() {\n\t\t//sorry, nothing\n\t}\n\n\tcreateVb() {\n\t\tconst geom = new RectTileGeom();\n\t\tgeom.addIndex(this.indexBuffer);\n\t\tgeom.lastTimeAccess = Date.now();\n\t\treturn geom;\n\t}\n\n\tcheckIndexBuffer(size: number, vb: RectTileGeom = null) {\n\t\tconst totalIndices = size * 6;\n\n\t\tif (totalIndices <= this.ibLen) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet len = totalIndices;\n\t\twhile (len < totalIndices) {\n\t\t\tlen <<= 1;\n\t\t}\n\n\t\tthis.ibLen = totalIndices;\n\t\tthis.indexBuffer.update((PIXI as any).utils.createIndicesForQuads(size,\n\t\t\tConstant.use32bitIndex ? new Uint32Array(size * 6) : undefined));\n\n\t\t// \tTODO: create new index buffer instead?\n\t\t// if (vb) {\n\t\t// \tconst curIndex = vb.getIndex();\n\t\t// \tif (curIndex !== this.indexBuffer && (curIndex.data as any).length < totalIndices) {\n\t\t// \t\tthis.swapIndex(vb, this.indexBuffer);\n\t\t// \t}\n\t\t// }\n\t}\n\n\t// swapIndex(geom: PIXI.Geometry, indexBuf: PIXI.Buffer) {\n\t\t// let buffers = (geom as any).buffers;\n\t\t// const oldIndex = geom.getIndex();\n\t\t// let ind = buffers.indexOf(oldIndex);\n\t\t// if (ind >= 0) {\n\t\t// \tbuffers.splice(ind, 1);\n\t\t// }\n\t\t// geom.addIndex(indexBuf);\n\t// }\n\n\tgetShader(): TilemapShader {\n\t\treturn this.rectShader;\n\t}\n\n\tdestroy() {\n\t\tsuper.destroy();\n\t\t// this.rectShader.destroy();\n\t\tthis.rectShader = null;\n\t}\n}\n\nRenderer.registerPlugin('tilemap', TileRenderer as any);\n","/// <reference path=\"types.d.ts\" />\n\nimport { Container } from '@pixi/display';\n\nimport type { CompositeRectTileLayer } from './CompositeRectTileLayer';\nimport type { Matrix } from '@pixi/math';\n\nexport class ZLayer extends Container {\n\n    constructor(tilemap: Container, zIndex: number) {\n        super();\n        this.tilemap = tilemap;\n        this.z = zIndex;\n    }\n\n    tilemap: any;\n    z: number;\n    zIndex: number;\n    _previousLayers: number;\n    canvasBuffer: HTMLCanvasElement;\n    _tempRender: any;\n    _lastAnimationFrame: number = -1;\n    layerTransform: Matrix;\n\n    clear() {\n        let layers = this.children as Array<CompositeRectTileLayer>;\n        for (let i = 0; i < layers.length; i++)\n            layers[i].clear();\n        this._previousLayers = 0;\n    }\n\n    cacheIfDirty() {\n        let tilemap: any = this.tilemap;\n        let layers = this.children as Array<CompositeRectTileLayer>;\n        let modified = this._previousLayers !== layers.length;\n        this._previousLayers = layers.length;\n        let buf = this.canvasBuffer;\n        let tempRender = this._tempRender;\n        if (!buf) {\n            buf = this.canvasBuffer = document.createElement('canvas');\n            tempRender = this._tempRender = new (PIXI as any).CanvasRenderer({width: 100, height: 100, view: buf});\n            tempRender.context = tempRender.rootContext;\n            tempRender.plugins.tilemap.dontUseTransform = true;\n        }\n        if (buf.width !== tilemap._layerWidth ||\n            buf.height !== tilemap._layerHeight) {\n            buf.width = tilemap._layerWidth;\n            buf.height = tilemap._layerHeight;\n            modified = true;\n        }\n        let i: number;\n        if (!modified) {\n            for (i = 0; i < layers.length; i++) {\n                if (layers[i].isModified(this._lastAnimationFrame !== tilemap.animationFrame)) {\n                    modified = true;\n                    break;\n                }\n            }\n        }\n        this._lastAnimationFrame = tilemap.animationFrame;\n        if (modified) {\n            if (tilemap._hackRenderer) {\n                tilemap._hackRenderer(tempRender);\n            }\n            tempRender.context.clearRect(0, 0, buf.width, buf.height);\n            for (i = 0; i < layers.length; i++) {\n                layers[i].clearModify();\n                layers[i].renderCanvas(tempRender);\n            }\n        }\n        this.layerTransform = this.worldTransform;\n        for (i = 0; i < layers.length; i++) {\n            this.layerTransform = layers[i].worldTransform;\n            break;\n        }\n    }\n\n    renderCanvas(renderer: any) {\n        this.cacheIfDirty();\n        let wt = this.layerTransform;\n        renderer.context.setTransform(\n            wt.a,\n            wt.b,\n            wt.c,\n            wt.d,\n            wt.tx * renderer.resolution,\n            wt.ty * renderer.resolution\n        );\n        let tilemap = this.tilemap;\n        renderer.context.drawImage(this.canvasBuffer, 0, 0);\n    }\n}\n","import { CanvasTileRenderer } from './CanvasTileRenderer';\nimport { CompositeRectTileLayer } from './CompositeRectTileLayer';\nimport { Constant } from './Constant';\nimport { GraphicsLayer } from './GraphicsLayer';\nimport { MultiTextureResource } from './MultiTextureResource';\nimport { RectTileLayer } from './RectTileLayer';\nimport { TilemapShader, RectTileShader, RectTileGeom } from './RectTileShader';\nimport { TileRenderer } from './TileRenderer';\nimport { ZLayer } from './ZLayer';\n\nexport const pixi_tilemap = {\n    CanvasTileRenderer,\n    CompositeRectTileLayer,\n    Constant,\n    GraphicsLayer,\n    MultiTextureResource,\n    RectTileLayer,\n    TilemapShader,\n    RectTileShader,\n    RectTileGeom,\n    TileRenderer,\n    ZLayer,\n};\n\nexport * from './CanvasTileRenderer';\nexport * from './CompositeRectTileLayer';\nexport * from './Constant';\nexport * from './GraphicsLayer';\nexport * from './MultiTextureResource';\nexport * from './RectTileLayer';\nexport * from './RectTileShader';\nexport * from './shaderGenerator';\nexport * from './TileRenderer';\nexport * from './ZLayer';"],"names":["SCALE_MODES","Container","Bounds","Texture","groupD8","DRAW_MODES","Graphics","Matrix","resources","Sprite","ALPHA_MODES","Shader","Program","shaderGenerator.fillSamplers","shaderGenerator.generateFragmentSrc","Geometry","Buffer","ObjectRenderer","BaseTexture","WRAP_MODES","Renderer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;MAIa,kBAAkB;IAK3B,YAAY,QAAkB;QAH9B,aAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClB,qBAAgB,GAAG,KAAK,CAAC;QAGrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAC1B;CACJ;AAED,MAAM,EAAE,GAAI,IAAY,CAAC,cAAc,CAAC;AAExC,IAAI,EAAE,EAAE;IACJ,EAAE,CAAC,cAAc,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;;;MCdxC,QAAQ,GAAG;IACpB,WAAW,EAAE,EAAE;IACf,UAAU,EAAE,IAAI;IAChB,SAAS,EAAE,IAAI;IACf,mBAAmB,EAAE,CAAC;IACtB,aAAa,EAAE,KAAK;IACpB,UAAU,EAAEA,qBAAW,CAAC,MAAM;IAC9B,QAAQ,EAAE,IAAI;;;MCAL,iBAAiB,GAAG,GAAG;MAEvB,aAAc,SAAQC,iBAAS;IACxC,YAAY,MAAc,EAAE,OAAiC;QACzD,KAAK,EAAE,CAAC;QAIZ,WAAM,GAAG,CAAC,CAAC;QACX,uBAAkB,GAAG,CAAC,CAAC;QACvB,mBAAc,GAAG,IAAIC,cAAM,EAAE,CAAC;QAC9B,gBAAW,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACrD,eAAU,GAAW,IAAI,CAAC;QAE1B,cAAS,GAAkB,EAAE,CAAC;QAC9B,YAAO,GAAG,KAAK,CAAC;QAGhB,YAAO,GAAG,CAAC,CAAC;QACZ,YAAO,GAAG,CAAC,CAAC;QACZ,oBAAe,GAAG,KAAK,CAAC;QAwIxB,SAAI,GAAG,CAAC,CAAC;QACT,OAAE,GAAiB,IAAI,CAAC;QACxB,aAAQ,GAAgB,IAAI,CAAC;QAC7B,YAAO,GAAiB,IAAI,CAAC;QAC7B,WAAM,GAAgB,IAAI,CAAC;QA3JvB,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;KACpC;IAgBD,UAAU,CAAC,MAAc,EAAE,QAAkC;QACzD,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,EAAE,CAAC;SACjB;aAAM,IAAI,EAAE,QAAQ,YAAY,KAAK,CAAC,IAAK,QAAoB,CAAC,WAAW,EAAE;YAC1E,QAAQ,GAAG,CAAC,QAAmB,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,QAAQ,GAAG,QAA0B,CAAC;QAC3C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KAExB;IAED,KAAK;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACxB;IAED,QAAQ,CAAC,QAAmC,EAAE,CAAS,EAAE,CAAS,EAAE,KAAa,EAAE,KAAa;QAC5F,IAAI,OAAgB,CAAC;QACrB,IAAI,YAAY,GAAG,CAAC,CAAC;QAErB,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC9B,YAAY,GAAG,QAAQ,CAAC;YACxB,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;SACzC;aAAM;YACH,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,OAAO,GAAGC,YAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACpC;iBAAM;gBACH,OAAO,GAAG,QAAmB,CAAC;aACjC;YAED,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACzC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,OAAO,CAAC,WAAW,EAAE;oBACpD,YAAY,GAAG,CAAC,CAAC;oBACjB,KAAK,GAAG,IAAI,CAAC;oBACb,MAAM;iBACT;aACJ;YAED,IAAI,CAAC,KAAK,EAAE;gBAGR,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1I,OAAO,IAAI,CAAC;KACf;IAED,OAAO,CAAC,YAAoB,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,SAAiB,EAAE,UAAkB,EACvG,QAAgB,CAAC,EAAE,QAAgB,CAAC,EAAE,SAAiB,CAAC,EAAE,aAAqB,IAAI,EAAE,aAAqB,IAAI;QAClH,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;QACtD,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACX,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACX,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACX,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACX,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpB,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChB,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACnB,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACnB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACtB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEpB,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAC,SAAS,EAAE,CAAC,GAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvE,OAAO,IAAI,CAAC;KACf;IAED,UAAU,CAAC,MAAc;QACrB,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAC1B,EAAE,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;KAC9B;IAED,SAAS,CAAC,MAAc,EAAE,KAAa;QACnC,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAE1B,EAAE,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;QAC3B,EAAE,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;KAC7B;IAED,SAAS,CAAC,MAAc,EAAE,KAAa;QACnC,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAE1B,EAAE,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;QAC3B,EAAE,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;KAC7B;IAED,YAAY,CAAC,QAAa;QACtB,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC1B,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;YAC7B,QAAQ,CAAC,OAAO,CAAC,YAAY,CACzB,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,UAAU,EAC3B,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,UAAU,CAC9B,CAAC;SACL;QACD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;KACnC;IAED,gBAAgB,CAAC,QAAa;QAC1B,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QACvC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;QAC5B,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,iBAAiB,EAAE;YAC9D,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACvC,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACtB,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3B,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC3D,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC3D,IAAI,YAAY,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAEjC,IAAI,YAAY,IAAI,CAAC,EAAE;gBACnB,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,WAAmB,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;aAChI;iBAAM;gBACH,QAAQ,CAAC,OAAO,CAAC,WAAW,GAAG,GAAG,CAAC;gBACnC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxC,QAAQ,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC;aACpC;SACJ;KACJ;IAQD,SAAS;QACL,IAAI,IAAI,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;YAClB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;SAClB;KACJ;IAED,MAAM,CAAC,QAAkB;QACrB,IAAI,MAAM,GAAI,QAAQ,CAAC,OAAe,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAChC,QAAQ,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC;QAClD,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACtG,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC/C,MAAM,CAAC,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;KAC1C;IAED,eAAe,CAAC,QAAkB,EAAE,MAAoB;QACpD,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;QAC5B,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QAChC,IAAI,UAAU,GAAG,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAC;QAEnD,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAChC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QAElC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAChD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAGpC,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QACjB,IAAI,CAAC,EAAE,EAAE;YACL,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACvB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,IAAI,GAAI,EAAU,CAAC,EAAE,CAAC;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;SAC/B;QAED,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QACxC,MAAM,mBAAmB,GAAG,QAAQ,CAAC,mBAAmB,CAAC;QAEzD,IAAI,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAEhD,IAAI,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAC,WAAW,CAAC;QAC3C,IAAI,QAAQ,KAAK,CAAC;YAAE,OAAO;QAC3B,IAAI,IAAI,CAAC,kBAAkB,KAAK,QAAQ,EAAE;YACtC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;YACnC,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,EAAE,EAAE;gBAEjD,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC;gBACnB,OAAO,EAAE,GAAG,EAAE,EAAE;oBACZ,EAAE,IAAI,CAAC,CAAC;iBACX;gBACD,IAAI,CAAC,QAAQ,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;gBACpC,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC/C,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC7C,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACnC;YAED,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YAE3C,IAAI,EAAE,GAAG,CAAC,CAAC;YAEX,IAAI,SAAS,GAAW,CAAC,CAAC;YAC1B,IAAI,MAAM,GAAW,IAAI,CAAC,OAAO,CAAC;YAClC,IAAI,MAAM,GAAW,IAAI,CAAC,OAAO,CAAC;YAIlC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,iBAAiB,EAAE;gBACvD,IAAI,GAAG,GAAG,GAAG,CAAC;gBACd,IAAI,IAAI,CAAC,eAAe,EAAE;oBACtB,IAAI,mBAAmB,GAAG,CAAC,EAAE;wBAEzB,SAAS,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBACjC,MAAM,GAAG,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC5C,MAAM,GAAG,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;qBACtD;yBAAM;wBACH,SAAS,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC1B,MAAM,GAAG,CAAC,CAAC;wBACX,MAAM,GAAG,CAAC,CAAC;qBACd;iBACJ;gBACD,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;gBACvD,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAE3B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACnD,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE,UAAU,GAAG,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC;gBAC9E,MAAM,YAAY,GAAG,KAAK,IAAI,SAAS,GAAG,IAAI,CAAC,CAAC;gBAChD,MAAM,YAAY,GAAG,KAAK,IAAI,UAAU,GAAG,IAAI,CAAC,CAAC;gBAEjD,IAAI,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,CAAC;gBACnG,IAAI,MAAM,KAAK,CAAC,EAAE;oBACd,EAAE,GAAG,CAAC,CAAC;oBACP,EAAE,GAAG,CAAC,CAAC;oBACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;oBACX,EAAE,GAAG,CAAC,CAAC;oBACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;oBACX,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;oBACX,EAAE,GAAG,CAAC,CAAC;oBACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;iBACd;qBAAM;oBACH,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;oBACf,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;oBACf,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;wBAClB,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;wBACX,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;qBACd;oBACD,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;oBAClB,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;oBAElB,MAAM,GAAGC,YAAO,CAAC,GAAG,CAAC,MAAM,EAAEA,YAAO,CAAC,EAAE,CAAC,CAAC;oBACzC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGA,YAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGA,YAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBAEpC,MAAM,GAAGA,YAAO,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBAChC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGA,YAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGA,YAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBAEpC,MAAM,GAAGA,YAAO,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBAChC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGA,YAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGA,YAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBAEpC,MAAM,GAAGA,YAAO,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBAChC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGA,YAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGA,YAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;iBACvC;gBAED,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBACd,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBACd,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACpB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACpB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACxB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACxB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC;gBACzB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC;gBACzB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,SAAS,CAAC;gBACtB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAClB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBACd,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACpB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACpB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACxB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACxB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC;gBACzB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC;gBACzB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,SAAS,CAAC;gBACtB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAClB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAClB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACpB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACpB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACxB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACxB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC;gBACzB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC;gBACzB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,SAAS,CAAC;gBACtB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBACd,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAClB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACpB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACpB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACxB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACxB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC;gBACzB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC;gBACzB,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,SAAS,CAAC;aACzB;YAED,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAEA,QAAQ,CAAC,QAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC5C,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAACC,oBAAU,CAAC,SAAS,EAAE,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;KACnE;IAED,UAAU,CAAC,IAAa;QACpB,IAAI,IAAI,CAAC,kBAAkB,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM;YACjD,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YACtB,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,WAAW;QACP,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;KACnD;IAES,gBAAgB;QAEtB,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;QAEvD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KACjE;IAEM,cAAc,CAAC,IAAgB;QAGlC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAC9B;YACI,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACjD;QAED,OAAO,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAChD;IAED,OAAO,CAAC,OAAa;QACjB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvB,IAAI,CAAC,SAAS,EAAE,CAAC;KACpB;;;MChYQ,sBAAuB,SAAQJ,iBAAS;IACjD,YAAY,MAAe,EAAE,OAAwB,EAAE,WAAoB;QACvE,KAAK,EAAE,CAAC;QAMZ,uBAAkB,GAAG,CAAC,CAAC;QACvB,gBAAW,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACrD,eAAU,GAAW,IAAI,CAAC;QAC1B,eAAU,GAAkB,IAAI,CAAC;QAR7B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KAC1C;IAWD,UAAU,CAAC,MAAe,EAAE,OAAwB,EAAE,WAAoB;QACtE,IAAI,WAAkB,KAAK,IAAI,EAAE;YAE7B,WAAW,GAAG,CAAC,CAAC;SACnB;QACD,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,QAAQ,CAAC,mBAAmB,GAAG,QAAQ,CAAC,WAAW,CAAC;QACtF,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC5B;KACJ;IAED,UAAU,CAAC,OAAuB;QAC9B,KAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,OAAO,CAAC,MAAM,EAAC,CAAC,EAAE,EAAE;YAC/B,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;gBACvC,MAAM,IAAI,KAAK,CAAC,8CAA8C;oBAC1D,6FAA6F,CAAC,CAAC;aACtG;SACJ;QACD,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACnC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAChC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,WAAW,CAAC,CAAC;QACnD,IAAI,CAAS,CAAC;QACd,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YACtB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAmB,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,CAAC;SACxG;QACD,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC1B,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC;YAClG,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;YAC7B,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC;YACnC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC;YACnC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACxB;KACJ;IAED,KAAK;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAmB,CAAC,KAAK,EAAE,CAAC;SAC/C;QACD,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;KAC/B;IAED,OAAO,CAAC,YAAoB,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,SAAiB,EAAE,UAAkB,EAAE,KAAc,EAAE,KAAc,EAAE,MAAe,EAAE,SAAkB,EAAE,UAAmB;QACrM,MAAM,UAAU,GAAW,YAAY,GAAG,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC;QAChE,MAAM,SAAS,GAAW,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;QAE1D,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAK,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAmB,CAAC,QAAQ,EAAE;YACpF,IAAI,CAAC,UAAU,GAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAmB,CAAC;YAC/D,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;SACtH;aAAM;YACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC;KACf;IAED,UAAU,CAAC,MAAc;QACrB,IAAI,IAAI,CAAC,UAAU,EACnB;YACI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;SACtC;QACD,OAAO,IAAI,CAAC;KACf;IAED,SAAS,CAAC,MAAc,EAAE,KAAa;QACnC,IAAI,IAAI,CAAC,UAAU,EACnB;YACI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC;KACf;IAED,SAAS,CAAC,MAAc,EAAE,KAAa;QACnC,IAAI,IAAI,CAAC,UAAU,EACnB;YACI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC;KACf;IAED,QAAQ,CAAC,QAAmC,EAAE,CAAS,EAAE,CAAS,EAAE,KAAc,EAAE,KAAc,EAAE,SAAkB,EAAE,UAAmB;QACvI,IAAI,OAAgB,CAAC;QACrB,IAAI,KAAK,GAAkB,IAAI,CAAC;QAChC,IAAI,GAAG,GAAW,CAAC,CAAC;QACpB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC9B,IAAI,UAAU,GAAG,QAAQ,GAAG,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC;YAClD,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAkB,CAAC;YAE9C,IAAI,CAAC,KAAK,EAAE;gBACR,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAkB,CAAC;gBACrC,IAAI,CAAC,KAAK,EAAE;oBACR,OAAO,IAAI,CAAC;iBACf;gBACD,GAAG,GAAG,CAAC,CAAC;aACX;iBAAM;gBACH,GAAG,GAAG,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;aACrC;YAED,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;SACjC;aAAM;YACH,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,OAAO,GAAGE,YAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACpC;iBAAM;gBACH,OAAO,GAAG,QAAmB,CAAC;aACjC;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtC,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAkB,CAAC;gBACzC,IAAI,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC;gBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACjC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,OAAO,CAAC,WAAW,EAAE;wBAC5C,KAAK,GAAG,KAAK,CAAC;wBACd,GAAG,GAAG,CAAC,CAAC;wBACR,MAAM;qBACT;iBACJ;gBACD,IAAI,KAAK,EAAE;oBACP,MAAM;iBACT;aACJ;YAED,IAAI,CAAC,KAAK,EAAE;gBACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACtC,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAkB,CAAC;oBACzC,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE;wBAC1C,KAAK,GAAG,KAAK,CAAC;wBACd,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;wBAC5B,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC7B,MAAM;qBACT;iBACJ;gBACD,IAAI,CAAC,KAAK,EAAE;oBACR,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;oBAChD,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;oBAC7B,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC;oBACnC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC;oBACnC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACrB,GAAG,GAAG,CAAC,CAAC;iBACX;aACJ;SACJ;QAED,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QACzJ,OAAO,IAAI,CAAC;KACf;IAED,YAAY,CAAC,QAAa;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC3D,OAAO;SACV;QACD,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC1B,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;YAC7B,QAAQ,CAAC,OAAO,CAAC,YAAY,CACzB,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,UAAU,EAC3B,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,UAAU,CAC9B,CAAC;SACL;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,CAAC,CAAC,CAAmB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;SAC3D;KACJ;IAED,MAAM,CAAC,QAAkB;QACrB,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC3D,OAAO;SACV;QACD,IAAI,MAAM,GAAI,QAAQ,CAAC,OAAe,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAChC,QAAQ,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAEzC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC;QAClD,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACtG,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC/C,MAAM,CAAC,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC;QACjD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACpC,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,CAAC,CAAC,CAAmB,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;SAClE;KACJ;IAED,UAAU,CAAC,IAAa;QACpB,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3B,IAAI,IAAI,CAAC,kBAAkB,KAAK,MAAM,CAAC,MAAM,EAAE;YAC3C,OAAO,IAAI,CAAC;SACf;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAK,MAAM,CAAC,CAAC,CAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAC/C,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;KAChB;IAED,WAAW;QACP,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,CAAC,CAAC,CAAmB,CAAC,WAAW,EAAE,CAAC;SAC9C;KACJ;;;MCpOQ,aAAc,SAAQG,iBAAQ;IACvC,YAAY,MAAc;QACtB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,YAAY,CAAC,QAAa;QACtB,IAAI,EAAE,GAAW,IAAI,CAAC;QACtB,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE;YAC3C,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC;YACnC,IAAI,CAAC,SAAS,CAAC,cAAc,GAAGC,WAAM,CAAC,QAAQ,CAAC;SACnD;QACD,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE;YAC3C,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,EAAE,CAAC;SACtC;QACD,QAAQ,CAAC,OAAO,CAAC,WAAW,GAAG,GAAG,CAAC;KACtC;IAQD,UAAU,CAAC,IAAa;QACpB,OAAO,KAAK,CAAC;KAChB;IAED,WAAW;KACV;;;MCrBQ,oBAAqB,SAAQC,cAAS,CAAC,QAAQ;IAC3D,YAAY,OAA6B;QACxC,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;QAe/C,aAAQ,GAAG,KAAK,CAAC;QACjB,cAAS,GAAW,CAAC,CAAC;QACtB,iBAAY,GAAe,IAAI,CAAC;QAUhC,YAAO,GAAgB,IAAI,CAAC;QAC5B,iBAAY,GAAkB,EAAE,CAAC;QACjC,YAAO,GAAkB,EAAE,CAAC;QA3B3B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;QACjC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,mBAAmB,EAAE,CAAC,EAAE,EAAE;YACrD,MAAM,GAAG,GAAG,IAAIC,aAAM,EAAE,CAAC;YACzB,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,OAAO,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAC7C,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,OAAO,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAChB;QACD,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;KACnC;IAMD,IAAI,CAAC,WAAwB;QAC5B,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAA;SACrE;QACD,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC;QAC3B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACxB;IAMD,UAAU,CAAC,GAAW,EAAE,OAAgB;QACvC,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,GAAG,CAAC,OAAO,CAAC,WAAW,KAAK,OAAO,CAAC,WAAW,EAAE;YACpD,OAAO;SACP;QACD,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAI,IAAI,CAAC,OAAe,CAAC,OAAO,CAAC;KAClD;IAED,MAAM,CAAC,QAAkB,EAAE,OAAoB,EAAE,SAAoB;QACpE,MAAM,EAAE,EAAE,EAAE,GAAG,QAAe,CAAC;QAE/B,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC;QAC7B,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,8BAA8B,EAAE,OAAO,CAAC,SAAS,KAAK,SAAS;YAChF,OAAO,CAAC,SAAS,KAAKC,qBAAW,CAAC,MAAM,CAAC,CAAC;QAE3C,IAAI,SAAS,CAAC,OAAO,GAAG,CAAC,EAAE;YACzB,SAAiB,CAAC,KAAK,GAAG,KAAK,CAAC;YAChC,SAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;YAEnC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAC9B,OAAO,CAAC,MAAM,EACd,KAAK,EACL,MAAM,EACN,CAAC,EACD,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,IAAI,EACZ,IAAI,CAAC,CAAC;SACP;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YAClC,IAAI,CAAC,YAAY,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;SAChF;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;QACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC;YACpC,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACzC,SAAS;aACT;YACD,MAAM,GAAG,GAAG,GAAG,CAAC,QAAe,CAAC;YAChC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;gBACtC,SAAS;aACT;YACD,IAAI,OAAO,KAAK,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAC1E;gBACC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EACjC,GAAG,CAAC,QAAQ,CAAC,CAAC,EACd,GAAG,CAAC,QAAQ,CAAC,CAAC,EACd,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,SAAS,EACd,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,IAAI,EACZ,IAAI,CAAC,YAAY,CAAC,CAAC;aACpB;YACD,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EACjC,GAAG,CAAC,QAAQ,CAAC,CAAC,EACd,GAAG,CAAC,QAAQ,CAAC,CAAC,EACd,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,IAAI,EACZ,GAAG,CAAC,MAAM,CAAC,CAAC;SACb;QAED,OAAO,IAAI,CAAC;KACZ;;;SC7Gc,YAAY,CAAC,MAAqB,EAAE,WAAmB;IACnE,IAAI,YAAY,GAAkB,EAAE,CAAC;IACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EACpC;QACI,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;KACvB;IACD,MAAM,CAAC,QAAQ,CAAC,SAAS,GAAG,YAAY,CAAC;IAEzC,IAAI,WAAW,GAAkB,EAAE,CAAC;IACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;QAClC,WAAW,CAAC,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC5C,WAAW,CAAC,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;KAC/C;IACD,MAAM,CAAC,QAAQ,CAAC,YAAY,GAAG,WAAW,CAAC;AAC/C,CAAC;SAEe,mBAAmB,CAAC,WAAmB,EAAE,WAAmB;IACxE,OAAO,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,GAAG,EAAE,CAAC;SACpD,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;AAChE,CAAC;SAEe,iBAAiB,CAAC,WAAmB;IACjD,IAAI,GAAG,GAAG,EAAE,CAAC;IAEb,GAAG,IAAI,IAAI,CAAC;IACZ,GAAG,IAAI,IAAI,CAAC;IAEZ,GAAG,IAAI,0BAA0B,CAAC;IAClC,GAAG,IAAI,0BAA0B,CAAC;IAClC,GAAG,IAAI,KAAK,CAAC;IAEb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EACpC;QACI,GAAG,IAAI,SAAS,CAAC;QAEjB,IAAG,CAAC,GAAG,WAAW,GAAC,CAAC,EACpB;YACI,GAAG,IAAI,kBAAkB,GAAG,CAAC,GAAG,KAAK,CAAC;SACzC;QAED,GAAG,IAAI,KAAK,CAAC;QACb,GAAG,IAAI,kCAAkC,GAAC,CAAC,GAAC,iCAAiC,GAAC,CAAC,GAAC,KAAK,CAAC;QACtF,GAAG,IAAI,KAAK,CAAC;KAChB;IAED,GAAG,IAAI,IAAI,CAAC;IACZ,GAAG,IAAI,IAAI,CAAC;IAEZ,OAAO,GAAG,CAAC;AACf;;AC/CA,IAAI,cAAc,GAAG;;;;;;;;;;;;;;;;CAgBpB,CAAC;AACF,IAAI,cAAc,GAAG;;;;;;;;;;;;;;;;;;;;;;;;CAwBpB,CAAC;MAEoB,aAAc,SAAQC,WAAM;IAGjD,YAAY,WAAmB,EAAE,UAAkB,EAAE,UAAkB;QACtE,KAAK,CACJ,IAAIC,YAAO,CACV,UAAU,EACV,UAAU,CAAC,EACZ;YACC,cAAc,EAAE,IAAI,YAAY,CAAC,CAAC,CAAC;YACnC,SAAS,EAAE,EAAE;YACb,YAAY,EAAE,EAAE;YAChB,eAAe,EAAE,IAAIL,WAAM,EAAE;SAC7B,CACD,CAAC;QAbH,gBAAW,GAAG,CAAC,CAAC;QAcf,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/BM,YAA4B,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KACrD;CACD;MAEY,cAAe,SAAQ,aAAa;IAChD,YAAY,WAAmB;QAC9B,KAAK,CACJ,WAAW,EACX,cAAc,EACdC,mBAAmC,CAAC,WAAW,EAAE,cAAc,CAAC,CAChE,CAAC;QACFD,YAA4B,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KACrD;CACD;MAEY,YAAa,SAAQE,aAAQ;IAMzC;QACC,KAAK,EAAE,CAAC;QANT,aAAQ,GAAG,EAAE,CAAC;QACd,gBAAW,GAAG,CAAC,CAAC;QAChB,WAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAC3B,mBAAc,GAAG,CAAC,CAAC;QAIlB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAIC,WAAM,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;aACpE,YAAY,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC;aACnE,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC;aAC5D,YAAY,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC;aAC3D,YAAY,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;KACpE;;;MCpFW,YAAa,SAAQC,mBAAc;IAY/C,YAAY,QAAkB;QAC7B,KAAK,CAAC,QAAQ,CAAC,CAAC;QAVjB,OAAE,GAAW,CAAC,CAAC,CAAC;QAChB,gBAAW,GAAW,IAAI,CAAC;QAC3B,UAAK,GAAW,CAAC,CAAC;QAClB,aAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClB,WAAM,GAAkB,EAAE,CAAC;QAG3B,iBAAY,GAAgC,EAAE,CAAC;QAI9C,IAAI,CAAC,UAAU,GAAG,IAAI,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC3D,IAAI,CAAC,WAAW,GAAG,IAAID,WAAM,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,UAAU,EAAE,CAAC;KAClB;IAED,UAAU;QACT,IAAI,QAAQ,CAAC,mBAAmB,IAAI,CAAC,EAAE;YACtC,OAAO;SACP;QAED,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,QAAQ,GAAG,IAAI,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,IAAIE,gBAAW,CAAC,QAAQ,CAAC,CAAC;YAC1C,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,UAAU,CAAC;YACxC,OAAO,CAAC,QAAQ,GAAGC,oBAAU,CAAC,KAAK,CAAC;YACpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACjC;KACD;IAED,qBAAqB,CAAC,QAAkB,EAAE,MAAqB,EAAE,QAAwB;QACxF,IAAI,WAAW,GAAmB,MAAc,CAAC,QAAQ,CAAC,YAAY,CAAC;QACvE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBAC/B,OAAO;aACP;YACD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEtC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC;YACzD,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;SAC9D;QACA,MAAc,CAAC,QAAQ,CAAC,YAAY,GAAG,WAAW,CAAC;KACpD;IAED,YAAY,CAAC,QAAkB,EAAE,MAAqB,EAAE,QAAwB;QAC/E,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC;QAC5B,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,IAAI,GAAG,GAAG,QAAQ,CAAC,mBAAmB,GAAG,WAAW,EAAE;YACrD,OAAO;SACP;QACD,IAAI,QAAQ,CAAC,mBAAmB,IAAI,CAAC,EAAE;YACtC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YACvD,OAAO;SACP;QAED,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACpB,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK;gBAAE,SAAS;YACzC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACxC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;SACjC;QAED,IAAI,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC5B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;YAE9B,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SACvD;KACD;IAED,KAAK;KAEJ;IAED,QAAQ;QACP,MAAM,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC;KACZ;IAED,gBAAgB,CAAC,IAAY,EAAE,KAAmB,IAAI;QACrD,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,CAAC;QAE9B,IAAI,YAAY,IAAI,IAAI,CAAC,KAAK,EAAE;YAC/B,OAAO;SACP;QAOD,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;QAC1B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAE,IAAY,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,EACrE,QAAQ,CAAC,aAAa,GAAG,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;KASlE;IAYD,SAAS;QACR,OAAO,IAAI,CAAC,UAAU,CAAC;KACvB;IAED,OAAO;QACN,KAAK,CAAC,OAAO,EAAE,CAAC;QAEhB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KACvB;CACD;AAEDC,aAAQ,CAAC,cAAc,CAAC,SAAS,EAAE,YAAmB,CAAC;;MC1I1C,MAAO,SAAQnB,iBAAS;IAEjC,YAAY,OAAkB,EAAE,MAAc;QAC1C,KAAK,EAAE,CAAC;QAWZ,wBAAmB,GAAW,CAAC,CAAC,CAAC;QAV7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC;KACnB;IAWD,KAAK;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,QAAyC,CAAC;QAC5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE;YAClC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;KAC5B;IAED,YAAY;QACR,IAAI,OAAO,GAAQ,IAAI,CAAC,OAAO,CAAC;QAChC,IAAI,MAAM,GAAG,IAAI,CAAC,QAAyC,CAAC;QAC5D,IAAI,QAAQ,GAAG,IAAI,CAAC,eAAe,KAAK,MAAM,CAAC,MAAM,CAAC;QACtD,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC;QACrC,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5B,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAClC,IAAI,CAAC,GAAG,EAAE;YACN,GAAG,GAAG,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC3D,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,IAAK,IAAY,CAAC,cAAc,CAAC,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC,CAAC;YACvG,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC;YAC5C,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;SACtD;QACD,IAAI,GAAG,CAAC,KAAK,KAAK,OAAO,CAAC,WAAW;YACjC,GAAG,CAAC,MAAM,KAAK,OAAO,CAAC,YAAY,EAAE;YACrC,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC;YAChC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;YAClC,QAAQ,GAAG,IAAI,CAAC;SACnB;QACD,IAAI,CAAS,CAAC;QACd,IAAI,CAAC,QAAQ,EAAE;YACX,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAChC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,KAAK,OAAO,CAAC,cAAc,CAAC,EAAE;oBAC3E,QAAQ,GAAG,IAAI,CAAC;oBAChB,MAAM;iBACT;aACJ;SACJ;QACD,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,cAAc,CAAC;QAClD,IAAI,QAAQ,EAAE;YACV,IAAI,OAAO,CAAC,aAAa,EAAE;gBACvB,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aACrC;YACD,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1D,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAChC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;gBACxB,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;aACtC;SACJ;QACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;YAC/C,MAAM;SACT;KACJ;IAED,YAAY,CAAC,QAAa;QACtB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;QAC7B,QAAQ,CAAC,OAAO,CAAC,YAAY,CACzB,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,CAAC,EACJ,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,UAAU,EAC3B,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,UAAU,CAC9B,CAAC;QACF,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACvD;;;MChFQ,YAAY,GAAG;IACxB,kBAAkB;IAClB,sBAAsB;IACtB,QAAQ;IACR,aAAa;IACb,oBAAoB;IACpB,aAAa;IACb,aAAa;IACb,cAAc;IACd,YAAY;IACZ,YAAY;IACZ,MAAM;;;;;;;;;;;;;;;;;;;;"}